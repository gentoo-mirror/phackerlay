diff --git a/include/xplot/xaxes.hpp b/include/xplot/xaxes.hpp
index d0d6295..1287055 100644
--- a/include/xplot/xaxes.hpp
+++ b/include/xplot/xaxes.hpp
@@ -39,7 +39,7 @@ namespace xpl
         using base_type = xplot<D>;
         using derived_type = D;

-        using scale_type = xw::xholder<xscale>;
+        using scale_type = xw::xholder;
         using tick_values_type = std::vector<double>;

         void serialize_state(nl::json&, xeus::buffer_sequence&) const;
diff --git a/include/xplot/xfigure.hpp b/include/xplot/xfigure.hpp
index 1446403..d36e519 100644
--- a/include/xplot/xfigure.hpp
+++ b/include/xplot/xfigure.hpp
@@ -41,10 +41,10 @@ namespace xpl
         using base_type = xw::xwidget<D>;
         using derived_type = D;

-        using axes_type = std::vector<xw::xholder<xaxis>>;
-        using marks_type = std::vector<xw::xholder<xmark>>;
-        using scales_type = xw::xholder<xscale>;
-        using interaction_type = xw::xholder<xinteraction>;
+        using axes_type = std::vector<xw::xholder>;
+        using marks_type = std::vector<xw::xholder>;
+        using scales_type = xw::xholder;
+        using interaction_type = xw::xholder;

         void serialize_state(nl::json&, xeus::buffer_sequence&) const;
         void apply_patch(const nl::json&, const xeus::buffer_sequence&);
@@ -173,7 +173,7 @@ namespace xpl
     template <class T>
     inline void xfigure<D>::add_mark(const xmark<T>& w)
     {
-        this->marks().emplace_back(xw::make_id_holder<xmark>(w.id()));
+        this->marks().emplace_back(xw::make_id_holder(w.id()));
         send_marks_patch();
     }

@@ -189,7 +189,7 @@ namespace xpl
     template <class T>
     inline enable_xmark_t<T> xfigure<D>::add_mark(std::shared_ptr<T> w)
     {
-        this->marks().emplace_back(xw::make_shared_holder<xmark, T>(w));
+        this->marks().emplace_back(xw::make_shared_holder<T>(w));
         send_marks_patch();
     }

@@ -200,7 +200,7 @@ namespace xpl
         this->marks().erase(
             std::remove_if(
                 this->marks().begin(), this->marks().end(),
-                [&w](const xw::xholder<xmark>& element) {
+                [&w](const xw::xholder& element) {
                     return element.id() == w.id();
                 }
             ),
@@ -220,7 +220,7 @@ namespace xpl
     template <class T>
     inline void xfigure<D>::add_axis(const xaxis<T>& w)
     {
-        this->axes().emplace_back(xw::make_id_holder<xaxis>(w.id()));
+        this->axes().emplace_back(xw::make_id_holder(w.id()));
         send_axes_patch();
     }

@@ -236,7 +236,7 @@ namespace xpl
     template <class T>
     inline enable_xaxis_t<T> xfigure<D>::add_axis(std::shared_ptr<T> w)
     {
-        this->axes().emplace_back(xw::make_shared_holder<xaxis, T>(w));
+        this->axes().emplace_back(xw::make_shared_holder<T>(w));
         send_axes_patch();
     }

@@ -247,7 +247,7 @@ namespace xpl
         this->axes().erase(
             std::remove_if(
                 this->axes().begin(), this->axes().end(),
-                [&w](const xw::xholder<xaxis>& element) {
+                [&w](const xw::xholder& element) {
                     return element.id() == w.id();
                 }
             ),
diff --git a/include/xplot/xmarks.hpp b/include/xplot/xmarks.hpp
index 6140b54..8ddad21 100644
--- a/include/xplot/xmarks.hpp
+++ b/include/xplot/xmarks.hpp
@@ -61,8 +61,8 @@ namespace xpl
      * xmark declaration *
      *********************/

-    using xmark_scales_type = std::map<std::string, xw::xholder<xscale>>;
-    using xmark_tooltip_type = xw::xholder<xw::xwidget>;
+    using xmark_scales_type = std::map<std::string, xw::xholder>;
+    using xmark_tooltip_type = xw::xholder;

     template <class D>
     class xmark : public xplot<D>
diff --git a/include/xplot/xtoolbar.hpp b/include/xplot/xtoolbar.hpp
index da5a244..f5f1948 100644
--- a/include/xplot/xtoolbar.hpp
+++ b/include/xplot/xtoolbar.hpp
@@ -18,6 +18,7 @@
 #include "xwidgets/xmaterialize.hpp"
 #include "xwidgets/xmaker.hpp"
 #include "xwidgets/xwidget.hpp"
+#include "xwidgets/xfactory.hpp"

 #include "xfigure.hpp"
 #include "xinteracts.hpp"
@@ -44,7 +45,7 @@ namespace xpl
         void serialize_state(nl::json&, xeus::buffer_sequence&) const;
         void apply_patch(const nl::json&, const xeus::buffer_sequence&);

-        XPROPERTY(xw::xholder<xfigure>, derived_type, figure);
+        XPROPERTY(xw::xholder, derived_type, figure);
         XPROPERTY(bool, derived_type, panning);
         XPROPERTY(xtl::xoptional<xw::xmaterialize<xpan_zoom>>, derived_type, panzoom);
